To ma działać tak: dostaje na wejście  0001 zegar(1) 0011 zegar(1) 0100 zegar(1) 1111 I wtedy zapala wyjscie2- w stanie zegar(0). 
Jeżeli się ktoś pomyli przy wpisywaniu kolejnym sygnał tmp jest zerowany i trzeba od początku zaczynac. 
Wejscie1 jest tylko dodatkowo w celu podglądu  czy dobrze łyknął ciąg, jak się wpisze np. 0001 to się wyświetli 0001. 

library IEEE;
use IEEE.std_logic_1164.all;

entity maszynastanow is
port( 
	we:	in std_logic_vector ( 3 downto 0 );
	clk:	in std_logic;
	wy1:	out std_logic_vector ( 3 downto 0 );
	wy2:	out std_logic
);
end entity maszynastanow;

architecture beh of maszynastanow is
signal tmp : std_logic_vector( 3 downto 0);
begin
	process (clk, we) is
	begin
		if clk='1' then					
			if rising_edge(clk) then
			case we is
				when "0001"	=>	
					wy1 <= "0001"; 
					wy2 <= '0'; 
					tmp <= "0001";	
				when "0011"	=>	
					wy1 <= "0011"; 
					wy2 <= '0'; 
					if tmp="0001" then
						tmp <= "0010";
					end if;	
				when "0111"	=>	
					wy1 <= "0111"; 
					wy2 <= '0'; 
					if tmp="0010" then
						tmp <= "0100";
					end if;
				when "1111"	=>	
					wy1 <= "1111"; 
					wy2 <= '0'; 
					tmp <= "1000";
					if tmp="0100" then
						tmp <= "1000";
					end if;
				when others	=>	
					wy1 <= "0000"; 
					wy2 <= '0';
					tmp <= "0000";
			end case;

		elsif clk='0' then
			wy1 <= "0000"; 
			if tmp="1000" then
				wy2 <= '1';
			else
				wy2 <= '0';
			end if;
		end if;
	end process;
end architecture beh;

 
